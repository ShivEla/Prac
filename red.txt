Here's a comprehensive list of Redis commands in Python using the `redis-py` library:

1. **Connection Handling:**
   - `redis.Redis(host='localhost', port=6379, db=0)`: Establish a connection to Redis.
   - `ping()`: Check if the server is running.

2. **String Operations:**
   - `set(name, value)`: Set the value at key `name` to `value`.
   - `get(name)`: Get the value at key `name`.
   - `mset(mapping)`: Set multiple keys to multiple values.

3. **Hash Operations:**
   - `hset(name, key, value)`: Set `key` to `value` within hash `name`.
   - `hget(name, key)`: Get the value associated with `key` in hash `name`.
   - `hmset(name, mapping)`: Set multiple hash fields to multiple values.
   - `hgetall(name)`: Get all fields and values from hash `name`.

4. **List Operations:**
   - `lpush(name, value)`: Push `value` onto the left end of list `name`.
   - `rpush(name, value)`: Push `value` onto the right end of list `name`.
   - `lrange(name, start, end)`: Get a range of elements from list `name`.

5. **Set Operations:**
   - `sadd(name, value)`: Add `value` to set `name`.
   - `smembers(name)`: Get all members of set `name`.
   - `sismember(name, value)`: Check if `value` is a member of set `name`.

6. **Sorted Set Operations:**
   - `zadd(name, mapping)`: Add one or more members to a sorted set, or update its score if it already exists.
   - `zrange(name, start, end)`: Return a range of members in a sorted set, by index.
   - `zrangebyscore(name, min, max)`: Return a range of members in a sorted set, by score.

7. **Pub/Sub:**
   - `publish(channel, message)`: Publish `message` to `channel`.
   - `subscribe(channel)`: Subscribe to messages on `channel`.

8. **HyperLogLog Operations:**
   - `pfadd(key, element, [element, ...])`: Adds elements to the HyperLogLog data structure.
   - `pfcount(key, [key, ...])`: Returns the approximated cardinality of HyperLogLogs.
   - `pfmerge(destkey, sourcekey, [sourcekey, ...])`: Merges multiple HyperLogLogs into a single one.

9. **Transaction:**
   - `pipeline()`: Create a pipeline for batched commands.

These commands cover the majority of Redis functionalities in Python. You can refer to the `redis-py` documentation for more details and additional commands: [redis-py documentation](https://redis-py.readthedocs.io/en/stable/).
